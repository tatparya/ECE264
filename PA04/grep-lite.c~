#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#define MAX 2000

void helpMessage();					//	To print help message

int main ( int argc, char ** argv )
{
	//	Check for --help trigger
	int help = 0;                   // To trigger help switch   
    int index;                      // Index to go through loops
	int bogus = 0;						// Trigger bogus arg switch

	//	Defining all switches
	int invert = 0;
	int line = 0;
	int quiet = 0;
	int found = 0;
	
	//  Check for argv[1] present
  
    //--------------CHECK FOR HELP SWITCH AND BOGUS ARGUMENT---------
	for ( index = 1; index < argc; index++ )    //  Index = 1 because we want to skip the first string
    {
        if ( strcmp ( argv[index], "--help" ) == 0 )
        {
            help++;
		}
		
		else if ( argv[index][0] == '-' && !( argv[index][1] == 'v' || argv[index][1] == 'n' || argv[index][1] == 'q'  || strcmp ( argv[index], "--invert-match" ) == 0 || strcmp ( argv[index], "--line-number" ) == 0 || strcmp ( argv[index], "--quiet" ) == 0 ) ) 
		{
			bogus++;
		}
	}
	
	//-------------TO CHECK IF LAST ARGV IS A PATTERN AND NOT A TRIGGER---------
	if ( !help && !bogus )
	{	
		if ( argc > 1 && argv[argc-1][0]  == '-' )
		{
			//	Last argument is not a pattern, rerturn 2
			fprintf ( stderr, "'%s' is not a valid Pattern", argv[argc-1] );
			return 2;
		}
	}
	else if ( help )
	{
		//	Print Help Message
		helpMessage();
		//	EXIT
		return EXIT_SUCCESS;
	}
	else if ( bogus )
	{
		//	Bogus argument detected
		fprintf( stderr, "unknown switch %s", argv[1] );
		
		//	EXIT
		return 2;
	}

	char buffer[MAX];			// To recieve inputs from stdin
	int lineNumber = 1;			// To keep track of line number

	//----------READ ARGUMENTS PASSED----------
	for ( index = 1; index < argc ; index++ )
	{
		//	Add condition to skip stdin
		if ( strcmp ( argv[index], "-v" ) == 0 || strcmp ( argv[index], "--invert-match" ) == 0 )
		{
			//		INVERT MATCH
			invert++;
		}
		else if ( strcmp ( argv[index], "-n" ) == 0 || strcmp ( argv[index], "--line-number" ) == 0 )
		{
			//		LINE NUMBER
			line++;
		}

		else if ( strcmp ( argv[index], "-q" ) == 0 || strcmp ( argv[index], "--quiet" ) == 0)
		{
			//		QUIET
			quiet++;
			
			//		IF QUIET IS PASSED, EXIT WITH SUCCESS SINCE NO NEED TO PRINT
			return EXIT_SUCCESS;
		}
	}
	
	strcpy ( buffer, "");
	//----------READ STDIN AND WRITE ACCORDINGLY--------------
	while ( fgets( buffer, MAX, stdin ) != NULL )
	{
		if ( strstr ( buffer, argv[ argc - 1 ] ) != NULL )
		{
			//		Pattern found
			found++;
		}
		
		if ( ( strstr ( buffer, argv[ argc - 1 ] ) != NULL && !invert ) )		//		** Here argv[ argc - 1 ] == pattern
		{
			//		Pattern found in stdin
			if ( line )
			{
				printf("%d:", lineNumber );
			}
			printf("%s", buffer );
		}

		else if  ( strstr ( buffer, argv[ argc - 1 ] ) == NULL && invert )
		{
			//		Pattern not present in line
			if ( line )
			{
				printf("%d:", lineNumber );
			}
			printf("%s", buffer );
		}
		
		lineNumber++;
	}
	
	//----------CHECK IF PATTERN WAS FOUND----------
	if ( !found )
	{
		return 1;
	}
	
	printf ( "\n" );
	
	return EXIT_SUCCESS;
}

void helpMessage()
{
	//	PRINT HELP MESSAGE
	printf("Usage: grep-lite [OPTION]... PATTERN\n"
	"Search for PATTERN in standard input. PATTERN is a\n"
	"string. grep-lite will search standard input line by\n"
	"line, and (by default) print out those lines which\n"
	"contain pattern as a substring.\n"
	"\n"
	"  -v, --invert-match     print non-matching lines\n"
	"  -n, --line-number      print line numbers with output\n"
	"  -q, --quiet            suppress all output\n"
	"\n"
	"Exit status is 0 if any line is selected, 1 otherwise;\n"
	"if any error occurs, then the exit status is 2.\n"
	);
}
